package alauncher.cn.measuringinstrument.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import alauncher.cn.measuringinstrument.bean.ResultData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RESULT_DATA".
*/
public class ResultDataDao extends AbstractDao<ResultData, Long> {

    public static final String TABLENAME = "RESULT_DATA";

    /**
     * Properties of entity ResultData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Handler = new Property(1, String.class, "handler", false, "HANDLER");
        public final static Property Time = new Property(2, long.class, "time", false, "TIME");
        public final static Property WorkpieceId = new Property(3, long.class, "workpieceId", false, "WORKPIECE_ID");
        public final static Property Event = new Property(4, String.class, "event", false, "EVENT");
        public final static Property Result = new Property(5, int.class, "result", false, "RESULT");
        public final static Property M1 = new Property(6, double.class, "m1", false, "M1");
        public final static Property M2 = new Property(7, double.class, "m2", false, "M2");
        public final static Property M3 = new Property(8, double.class, "m3", false, "M3");
        public final static Property M4 = new Property(9, double.class, "m4", false, "M4");
    }


    public ResultDataDao(DaoConfig config) {
        super(config);
    }
    
    public ResultDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESULT_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"HANDLER\" TEXT," + // 1: handler
                "\"TIME\" INTEGER NOT NULL ," + // 2: time
                "\"WORKPIECE_ID\" INTEGER NOT NULL ," + // 3: workpieceId
                "\"EVENT\" TEXT," + // 4: event
                "\"RESULT\" INTEGER NOT NULL ," + // 5: result
                "\"M1\" REAL NOT NULL ," + // 6: m1
                "\"M2\" REAL NOT NULL ," + // 7: m2
                "\"M3\" REAL NOT NULL ," + // 8: m3
                "\"M4\" REAL NOT NULL );"); // 9: m4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESULT_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ResultData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String handler = entity.getHandler();
        if (handler != null) {
            stmt.bindString(2, handler);
        }
        stmt.bindLong(3, entity.getTime());
        stmt.bindLong(4, entity.getWorkpieceId());
 
        String event = entity.getEvent();
        if (event != null) {
            stmt.bindString(5, event);
        }
        stmt.bindLong(6, entity.getResult());
        stmt.bindDouble(7, entity.getM1());
        stmt.bindDouble(8, entity.getM2());
        stmt.bindDouble(9, entity.getM3());
        stmt.bindDouble(10, entity.getM4());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ResultData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String handler = entity.getHandler();
        if (handler != null) {
            stmt.bindString(2, handler);
        }
        stmt.bindLong(3, entity.getTime());
        stmt.bindLong(4, entity.getWorkpieceId());
 
        String event = entity.getEvent();
        if (event != null) {
            stmt.bindString(5, event);
        }
        stmt.bindLong(6, entity.getResult());
        stmt.bindDouble(7, entity.getM1());
        stmt.bindDouble(8, entity.getM2());
        stmt.bindDouble(9, entity.getM3());
        stmt.bindDouble(10, entity.getM4());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ResultData readEntity(Cursor cursor, int offset) {
        ResultData entity = new ResultData( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // handler
            cursor.getLong(offset + 2), // time
            cursor.getLong(offset + 3), // workpieceId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // event
            cursor.getInt(offset + 5), // result
            cursor.getDouble(offset + 6), // m1
            cursor.getDouble(offset + 7), // m2
            cursor.getDouble(offset + 8), // m3
            cursor.getDouble(offset + 9) // m4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ResultData entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setHandler(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.getLong(offset + 2));
        entity.setWorkpieceId(cursor.getLong(offset + 3));
        entity.setEvent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setResult(cursor.getInt(offset + 5));
        entity.setM1(cursor.getDouble(offset + 6));
        entity.setM2(cursor.getDouble(offset + 7));
        entity.setM3(cursor.getDouble(offset + 8));
        entity.setM4(cursor.getDouble(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ResultData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ResultData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ResultData entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
