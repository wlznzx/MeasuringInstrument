package alauncher.cn.measuringinstrument.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import alauncher.cn.measuringinstrument.bean.StoreBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORE_BEAN".
*/
public class StoreBeanDao extends AbstractDao<StoreBean, Long> {

    public static final String TABLENAME = "STORE_BEAN";

    /**
     * Properties of entity StoreBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StoreMode = new Property(1, int.class, "storeMode", false, "STORE_MODE");
        public final static Property MValue = new Property(2, int.class, "mValue", false, "M_VALUE");
        public final static Property UpLimitValue = new Property(3, double.class, "upLimitValue", false, "UP_LIMIT_VALUE");
        public final static Property LowLimitValue = new Property(4, double.class, "lowLimitValue", false, "LOW_LIMIT_VALUE");
        public final static Property DelayTime = new Property(5, int.class, "delayTime", false, "DELAY_TIME");
    }


    public StoreBeanDao(DaoConfig config) {
        super(config);
    }
    
    public StoreBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"STORE_MODE\" INTEGER NOT NULL ," + // 1: storeMode
                "\"M_VALUE\" INTEGER NOT NULL ," + // 2: mValue
                "\"UP_LIMIT_VALUE\" REAL NOT NULL ," + // 3: upLimitValue
                "\"LOW_LIMIT_VALUE\" REAL NOT NULL ," + // 4: lowLimitValue
                "\"DELAY_TIME\" INTEGER NOT NULL );"); // 5: delayTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StoreBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStoreMode());
        stmt.bindLong(3, entity.getMValue());
        stmt.bindDouble(4, entity.getUpLimitValue());
        stmt.bindDouble(5, entity.getLowLimitValue());
        stmt.bindLong(6, entity.getDelayTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StoreBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStoreMode());
        stmt.bindLong(3, entity.getMValue());
        stmt.bindDouble(4, entity.getUpLimitValue());
        stmt.bindDouble(5, entity.getLowLimitValue());
        stmt.bindLong(6, entity.getDelayTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StoreBean readEntity(Cursor cursor, int offset) {
        StoreBean entity = new StoreBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // storeMode
            cursor.getInt(offset + 2), // mValue
            cursor.getDouble(offset + 3), // upLimitValue
            cursor.getDouble(offset + 4), // lowLimitValue
            cursor.getInt(offset + 5) // delayTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StoreBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStoreMode(cursor.getInt(offset + 1));
        entity.setMValue(cursor.getInt(offset + 2));
        entity.setUpLimitValue(cursor.getDouble(offset + 3));
        entity.setLowLimitValue(cursor.getDouble(offset + 4));
        entity.setDelayTime(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StoreBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StoreBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StoreBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
