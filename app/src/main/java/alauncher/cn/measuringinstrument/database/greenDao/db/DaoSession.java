package alauncher.cn.measuringinstrument.database.greenDao.db;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import alauncher.cn.measuringinstrument.bean.ResultData;
import alauncher.cn.measuringinstrument.bean.User;
import alauncher.cn.measuringinstrument.bean.ParameterBean;
import alauncher.cn.measuringinstrument.bean.CalibrationBean;

import alauncher.cn.measuringinstrument.database.greenDao.db.ResultDataDao;
import alauncher.cn.measuringinstrument.database.greenDao.db.UserDao;
import alauncher.cn.measuringinstrument.database.greenDao.db.ParameterBeanDao;
import alauncher.cn.measuringinstrument.database.greenDao.db.CalibrationBeanDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig resultDataDaoConfig;
    private final DaoConfig userDaoConfig;
    private final DaoConfig parameterBeanDaoConfig;
    private final DaoConfig calibrationBeanDaoConfig;

    private final ResultDataDao resultDataDao;
    private final UserDao userDao;
    private final ParameterBeanDao parameterBeanDao;
    private final CalibrationBeanDao calibrationBeanDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        resultDataDaoConfig = daoConfigMap.get(ResultDataDao.class).clone();
        resultDataDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        parameterBeanDaoConfig = daoConfigMap.get(ParameterBeanDao.class).clone();
        parameterBeanDaoConfig.initIdentityScope(type);

        calibrationBeanDaoConfig = daoConfigMap.get(CalibrationBeanDao.class).clone();
        calibrationBeanDaoConfig.initIdentityScope(type);

        resultDataDao = new ResultDataDao(resultDataDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);
        parameterBeanDao = new ParameterBeanDao(parameterBeanDaoConfig, this);
        calibrationBeanDao = new CalibrationBeanDao(calibrationBeanDaoConfig, this);

        registerDao(ResultData.class, resultDataDao);
        registerDao(User.class, userDao);
        registerDao(ParameterBean.class, parameterBeanDao);
        registerDao(CalibrationBean.class, calibrationBeanDao);
    }
    
    public void clear() {
        resultDataDaoConfig.clearIdentityScope();
        userDaoConfig.clearIdentityScope();
        parameterBeanDaoConfig.clearIdentityScope();
        calibrationBeanDaoConfig.clearIdentityScope();
    }

    public ResultDataDao getResultDataDao() {
        return resultDataDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public ParameterBeanDao getParameterBeanDao() {
        return parameterBeanDao;
    }

    public CalibrationBeanDao getCalibrationBeanDao() {
        return calibrationBeanDao;
    }

}
