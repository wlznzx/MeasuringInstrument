package alauncher.cn.measuringinstrument.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import alauncher.cn.measuringinstrument.bean.ParameterBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PARAMETER_BEAN".
*/
public class ParameterBeanDao extends AbstractDao<ParameterBean, Long> {

    public static final String TABLENAME = "PARAMETER_BEAN";

    /**
     * Properties of entity ParameterBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Code_id = new Property(0, long.class, "code_id", true, "_id");
        public final static Property M1_code = new Property(1, String.class, "m1_code", false, "M1_CODE");
        public final static Property M2_code = new Property(2, String.class, "m2_code", false, "M2_CODE");
        public final static Property M3_code = new Property(3, String.class, "m3_code", false, "M3_CODE");
        public final static Property M4_code = new Property(4, String.class, "m4_code", false, "M4_CODE");
    }


    public ParameterBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ParameterBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PARAMETER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: code_id
                "\"M1_CODE\" TEXT," + // 1: m1_code
                "\"M2_CODE\" TEXT," + // 2: m2_code
                "\"M3_CODE\" TEXT," + // 3: m3_code
                "\"M4_CODE\" TEXT);"); // 4: m4_code
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PARAMETER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ParameterBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCode_id());
 
        String m1_code = entity.getM1_code();
        if (m1_code != null) {
            stmt.bindString(2, m1_code);
        }
 
        String m2_code = entity.getM2_code();
        if (m2_code != null) {
            stmt.bindString(3, m2_code);
        }
 
        String m3_code = entity.getM3_code();
        if (m3_code != null) {
            stmt.bindString(4, m3_code);
        }
 
        String m4_code = entity.getM4_code();
        if (m4_code != null) {
            stmt.bindString(5, m4_code);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ParameterBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCode_id());
 
        String m1_code = entity.getM1_code();
        if (m1_code != null) {
            stmt.bindString(2, m1_code);
        }
 
        String m2_code = entity.getM2_code();
        if (m2_code != null) {
            stmt.bindString(3, m2_code);
        }
 
        String m3_code = entity.getM3_code();
        if (m3_code != null) {
            stmt.bindString(4, m3_code);
        }
 
        String m4_code = entity.getM4_code();
        if (m4_code != null) {
            stmt.bindString(5, m4_code);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ParameterBean readEntity(Cursor cursor, int offset) {
        ParameterBean entity = new ParameterBean( //
            cursor.getLong(offset + 0), // code_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // m1_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // m2_code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // m3_code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // m4_code
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ParameterBean entity, int offset) {
        entity.setCode_id(cursor.getLong(offset + 0));
        entity.setM1_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setM2_code(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setM3_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setM4_code(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ParameterBean entity, long rowId) {
        entity.setCode_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ParameterBean entity) {
        if(entity != null) {
            return entity.getCode_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ParameterBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
