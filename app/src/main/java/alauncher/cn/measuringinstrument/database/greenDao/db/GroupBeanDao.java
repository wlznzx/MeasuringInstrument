package alauncher.cn.measuringinstrument.database.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import alauncher.cn.measuringinstrument.bean.GroupBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_BEAN".
*/
public class GroupBeanDao extends AbstractDao<GroupBean, Long> {

    public static final String TABLENAME = "GROUP_BEAN";

    /**
     * Properties of entity GroupBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Code_id = new Property(0, long.class, "code_id", true, "_id");
        public final static Property M_index = new Property(1, int.class, "m_index", false, "M_INDEX");
        public final static Property A_upper_limit = new Property(2, double.class, "a_upper_limit", false, "A_UPPER_LIMIT");
        public final static Property A_lower_limit = new Property(3, double.class, "a_lower_limit", false, "A_LOWER_LIMIT");
        public final static Property B_upper_limit = new Property(4, double.class, "b_upper_limit", false, "B_UPPER_LIMIT");
        public final static Property B_lower_limit = new Property(5, double.class, "b_lower_limit", false, "B_LOWER_LIMIT");
        public final static Property C_upper_limit = new Property(6, double.class, "c_upper_limit", false, "C_UPPER_LIMIT");
        public final static Property C_lower_limit = new Property(7, double.class, "c_lower_limit", false, "C_LOWER_LIMIT");
        public final static Property D_upper_limit = new Property(8, double.class, "d_upper_limit", false, "D_UPPER_LIMIT");
        public final static Property D_lower_limit = new Property(9, double.class, "d_lower_limit", false, "D_LOWER_LIMIT");
        public final static Property A_describe = new Property(10, String.class, "a_describe", false, "A_DESCRIBE");
        public final static Property B_describe = new Property(11, String.class, "b_describe", false, "B_DESCRIBE");
        public final static Property C_describe = new Property(12, String.class, "c_describe", false, "C_DESCRIBE");
        public final static Property D_describe = new Property(13, String.class, "d_describe", false, "D_DESCRIBE");
    }


    public GroupBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GroupBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: code_id
                "\"M_INDEX\" INTEGER NOT NULL ," + // 1: m_index
                "\"A_UPPER_LIMIT\" REAL NOT NULL ," + // 2: a_upper_limit
                "\"A_LOWER_LIMIT\" REAL NOT NULL ," + // 3: a_lower_limit
                "\"B_UPPER_LIMIT\" REAL NOT NULL ," + // 4: b_upper_limit
                "\"B_LOWER_LIMIT\" REAL NOT NULL ," + // 5: b_lower_limit
                "\"C_UPPER_LIMIT\" REAL NOT NULL ," + // 6: c_upper_limit
                "\"C_LOWER_LIMIT\" REAL NOT NULL ," + // 7: c_lower_limit
                "\"D_UPPER_LIMIT\" REAL NOT NULL ," + // 8: d_upper_limit
                "\"D_LOWER_LIMIT\" REAL NOT NULL ," + // 9: d_lower_limit
                "\"A_DESCRIBE\" TEXT," + // 10: a_describe
                "\"B_DESCRIBE\" TEXT," + // 11: b_describe
                "\"C_DESCRIBE\" TEXT," + // 12: c_describe
                "\"D_DESCRIBE\" TEXT);"); // 13: d_describe
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCode_id());
        stmt.bindLong(2, entity.getM_index());
        stmt.bindDouble(3, entity.getA_upper_limit());
        stmt.bindDouble(4, entity.getA_lower_limit());
        stmt.bindDouble(5, entity.getB_upper_limit());
        stmt.bindDouble(6, entity.getB_lower_limit());
        stmt.bindDouble(7, entity.getC_upper_limit());
        stmt.bindDouble(8, entity.getC_lower_limit());
        stmt.bindDouble(9, entity.getD_upper_limit());
        stmt.bindDouble(10, entity.getD_lower_limit());
 
        String a_describe = entity.getA_describe();
        if (a_describe != null) {
            stmt.bindString(11, a_describe);
        }
 
        String b_describe = entity.getB_describe();
        if (b_describe != null) {
            stmt.bindString(12, b_describe);
        }
 
        String c_describe = entity.getC_describe();
        if (c_describe != null) {
            stmt.bindString(13, c_describe);
        }
 
        String d_describe = entity.getD_describe();
        if (d_describe != null) {
            stmt.bindString(14, d_describe);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCode_id());
        stmt.bindLong(2, entity.getM_index());
        stmt.bindDouble(3, entity.getA_upper_limit());
        stmt.bindDouble(4, entity.getA_lower_limit());
        stmt.bindDouble(5, entity.getB_upper_limit());
        stmt.bindDouble(6, entity.getB_lower_limit());
        stmt.bindDouble(7, entity.getC_upper_limit());
        stmt.bindDouble(8, entity.getC_lower_limit());
        stmt.bindDouble(9, entity.getD_upper_limit());
        stmt.bindDouble(10, entity.getD_lower_limit());
 
        String a_describe = entity.getA_describe();
        if (a_describe != null) {
            stmt.bindString(11, a_describe);
        }
 
        String b_describe = entity.getB_describe();
        if (b_describe != null) {
            stmt.bindString(12, b_describe);
        }
 
        String c_describe = entity.getC_describe();
        if (c_describe != null) {
            stmt.bindString(13, c_describe);
        }
 
        String d_describe = entity.getD_describe();
        if (d_describe != null) {
            stmt.bindString(14, d_describe);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public GroupBean readEntity(Cursor cursor, int offset) {
        GroupBean entity = new GroupBean( //
            cursor.getLong(offset + 0), // code_id
            cursor.getInt(offset + 1), // m_index
            cursor.getDouble(offset + 2), // a_upper_limit
            cursor.getDouble(offset + 3), // a_lower_limit
            cursor.getDouble(offset + 4), // b_upper_limit
            cursor.getDouble(offset + 5), // b_lower_limit
            cursor.getDouble(offset + 6), // c_upper_limit
            cursor.getDouble(offset + 7), // c_lower_limit
            cursor.getDouble(offset + 8), // d_upper_limit
            cursor.getDouble(offset + 9), // d_lower_limit
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // a_describe
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // b_describe
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // c_describe
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // d_describe
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupBean entity, int offset) {
        entity.setCode_id(cursor.getLong(offset + 0));
        entity.setM_index(cursor.getInt(offset + 1));
        entity.setA_upper_limit(cursor.getDouble(offset + 2));
        entity.setA_lower_limit(cursor.getDouble(offset + 3));
        entity.setB_upper_limit(cursor.getDouble(offset + 4));
        entity.setB_lower_limit(cursor.getDouble(offset + 5));
        entity.setC_upper_limit(cursor.getDouble(offset + 6));
        entity.setC_lower_limit(cursor.getDouble(offset + 7));
        entity.setD_upper_limit(cursor.getDouble(offset + 8));
        entity.setD_lower_limit(cursor.getDouble(offset + 9));
        entity.setA_describe(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setB_describe(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setC_describe(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setD_describe(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupBean entity, long rowId) {
        entity.setCode_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupBean entity) {
        if(entity != null) {
            return entity.getCode_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
